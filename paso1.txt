
cambiar 
 rented_movie a rented.html.erb ... (controlador, ruta y vista)

Callback para un boton de retorno - funciòn de forma intermedia
- despues de una acción ... (evento verificar )

antes de guardar - ver si existe -si tiene un valor client_id 
if nil - no existe el cliente - libera la pelicula




cd Blockbuster
rails 
code .
bundle update
# eliminar archivos rubyversion y Gemfile.lock
# cambiar el numero de la version de ruby en el Gemfile

rails s
bundle update
rails s
rails db:create
rails db:migrate
rails s



3. En el index de clientes mostrar si el cliente tiene una película arrendada.
(2 Puntos)
rails 
rails generate migration AddRentedToClient movie:references




Ajustando los Modelos
1. Modelo Cliente:

Ruby
class Client < ApplicationRecord
  belongs_to :movie
end
Usa el código con precaución.

Esto indica que un cliente pertenece a una película (la película que está arrendando).

2. Modelo Película:

Ruby
class Movie < ApplicationRecord
  has_one :client
end
Usa el código con precaución.

Esto indica que una película tiene un cliente asociado (el cliente que la está arrendando).

Actualizando el Controlador de Clientes
Ruby
class ClientsController < ApplicationController
  def index
    @clients = Client.all
  end
end
Usa el código con precaución.

Actualizando la Vista Index de Clientes
Fragmento de código
# app/views/clients/index.html.erb
<h1>Clientes</h1>
<table>
  <thead>
    <tr>
      <th>Nombre</th>
      <th>Película Arrendada</th>
    </tr>
  </thead>
  <tbody>
    <% @clients.each do |client| %>
      <tr>
        <td><%= client.name %></td>
        <td><%= client.movie.title   
 %></td> </tr>
    <% end %>
  </tbody>
</table>
Usa el código con precaución.

Explicación de los Cambios
Migración: Agrega un campo movie_id a la tabla de clientes para establecer la relación.
Modelos:
belongs_to: Indica que un cliente pertenece a una película.
has_one: Indica que una película tiene un cliente asociado.
Vista: Muestra el nombre del cliente y el título de la película arrendada, accediendo a la información a través de la asociación.
Consideraciones Adicionales
Validaciones: Puedes agregar validaciones para asegurar que un cliente solo pueda arrendar una película a la vez, o que una película solo pueda ser arrendada por un cliente.
Nulas: Si un cliente no tiene una película arrendada, el campo movie_id será nulo. Puedes manejar esto en la vista utilizando condicionales.
Asociaciones más complejas: Si un cliente puede arrendar múltiples películas, la relación sería has_many :movies en el modelo de Cliente y belongs_to :client en el modelo de Película.
Ejemplo Completo con Validaciones
Ruby
# app/models/client.rb
class Client < ApplicationRecord
  belongs_to :movie
  validates :name, presence: true
  validates :movie, uniqueness: true
end

# app/models/movie.rb
class Movie < ApplicationRecord
  has_one :client
  validates :title, presence: true
end
Usa el código con precaución.

Con esta configuración, un cliente solo puede tener una película arrendada a la vez y una película solo puede ser arrendada por un cliente.

Importante: Ajusta los nombres de los modelos, atributos y relaciones según tu aplicación específica.

¿Necesitas más ayuda? Si tienes alguna otra pregunta o necesitas más detalles, no dudes en preguntar.

¿Quieres agregar más funcionalidades? Podemos explorar opciones como:

Fechas de alquiler y devolución: Agregar campos para registrar cuándo se alquiló y cuándo se debe devolver una película.
Estados de alquiler: Agregar un campo para indicar si una película está disponible o arrendada.
Usuarios: Crear un modelo de Usuario y asociarlo a los clientes para permitir que los usuarios inicien sesión y administren sus alquileres.